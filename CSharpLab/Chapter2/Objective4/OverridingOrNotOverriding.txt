When building a class hierarchy, 
you sometimes want to replace or extend the behavior of a base
class. 
Assume that you want to add some logging capabilities to the repository you created. 
You don’t want to rewrite all filtering code; 
instead you just want to add some extra behavior.
This is where the virtual and override keywords come into play. 
Marking a method virtual allows derived classes to override the method. 
The derived class can choose to completely replace or to extend the behavior of the base class.

By marking the method in the base class as virtual, the derived class can override it. 
By prefixing a method name with base, a derived class can execute the method on the base class.
By skipping the call to base, the derived class completely replaces the functionality.
If a base class doesn’t declare a method as virtual, a derived class can’t override the method. 
It can, however, use the new keyword, which explicitly hides the member from a base class 
(this is different from using the new keyword to create a new instance of an object).